---
import hero from '../../assets/hero.png';
import { categoriesMap, type CategoryKey } from '../../i18n/products/categoriesMap';
import { unitsMap, type UnitKey } from '../../i18n/products/unitsMap';

export async function getStaticPaths() {
  return [
    { params: { lang: 'th' } },
    { params: { lang: 'en' } },
    { params: { lang: 'zh' } }
  ];
}

import Layout from '../../layouts/Layout.astro';
import { getTranslation } from '../../i18n';

type Lang = 'th' | 'en' | 'zh';
const lang = (Astro.params.lang ?? 'th') as Lang;
const t = getTranslation(lang);


interface ProductItem {
  id: string;
  categoryKey: CategoryKey;
  unitKey: UnitKey;
  name: Record<Lang, string>;
  description: Record<Lang, string>;
  image: string;
  price: number;
  stock: number;
  isAvailable: boolean;
  brand: string;
  highlight: boolean;
  createdAt: string;
}

let productList: ProductItem[] = [];
try {
  productList = (await import(`../../i18n/products/products.json`)).default as ProductItem[];
} catch (e) {
  console.warn(`‚ö†Ô∏è Failed to load product list.`);
}

const uniqueCategories = Array.from(new Set(productList.map(p => p.categoryKey)));

function loadImageFromAssets(fileName: string): string {
  try {
    const fullPath = new URL(`../../assets/${fileName}`, import.meta.url).href;
    console.log('‚úÖ Resolved image path:', fullPath);
    return fullPath;
  } catch (error) {
    console.warn('‚ö†Ô∏è Failed to resolve image for file:', fileName, error);
    return hero.src;
  }
}
---

<Layout title={t.products.title} lang={lang}>
  <section class="product-layout container">
    <aside class="cart-section sticky">
      <ul id="cart-list"></ul>
      <div id="cart-summary"></div>
      <button onclick="clearCart()" class="clear-cart">üóë {t.products.clearCart}</button>
    </aside>

    <main class="product-section">
      <h1 class="h1-title center">{t.products.title}</h1>

      <div class="filter-bar">
        <label>{t.products.productCategory}</label>
        <select id="category-filter" onchange="filterProducts()">
          <option value="all">{t.products.all}</option>
          {Object.entries(categoriesMap).map(([key, value]) => (
            <option value={key}>
              {value[lang as keyof typeof value] ?? key}
            </option>
          ))}
        </select>
      </div>

      <div class="product-grid">
        {productList.map((item) => (
          <div class="product-card" data-category={item.categoryKey}>
            <img 
              src={item.image || hero.src}
              alt={item.name[lang]} 
              loading="lazy" 
            />
            {/* <h6>{categoriesMap[item.categoryKey][lang]}</h6> */}
            <h5>{item.name[lang]}</h5>
            <h6>{item.description[lang]}</h6>
            {/* <h5><strong>‡∏ø{item.price} / {unitsMap[item.unitKey][lang]}</strong></h5> */}
            <button class="add-to-cart" onclick={`addToCart('${item.name[lang]}', ${item.price})`}>
              üõí {t.products.addProductCart}
            </button>
          </div>
        ))}
      </div>
    </main>
  </section>
  <button id="floating-cart-btn" class="floating-cart" onclick="scrollToCart()">
    <span class="cart-icon">üõí</span>
  </button>
</Layout>

<script is:inline>
  function filterProducts() {
    const selected = document.getElementById('category-filter').value;
    const allProducts = document.querySelectorAll('.product-card');

    allProducts.forEach(card => {
      const category = card.getAttribute('data-category');
      card.style.display = (selected === 'all' || category === selected) ? 'block' : 'none';
    });
  }

  window.addEventListener('DOMContentLoaded', () => {
    renderCart();
    filterProducts();
  });

  function addToCart(productName, price) {
    const cart = JSON.parse(localStorage.getItem('cart')) || [];
    const index = cart.findIndex(item => item.name === productName);
    if (index !== -1) {
      cart[index].quantity++;
    } else {
      cart.push({ name: productName, price: price, quantity: 1 });
    }
    localStorage.setItem('cart', JSON.stringify(cart));
    renderCart();
  }

  function removeFromCart(index) {
    const cart = JSON.parse(localStorage.getItem('cart')) || [];
    cart.splice(index, 1);
    localStorage.setItem('cart', JSON.stringify(cart));
    renderCart();
  }

  function clearCart() {
    localStorage.removeItem('cart');
    renderCart();
  }

  function updateQuantity(index, amount) {
    const cart = JSON.parse(localStorage.getItem('cart')) || [];
    if (cart[index]) {
      cart[index].quantity += amount;
      if (cart[index].quantity <= 0) {
        cart.splice(index, 1);
      }
    }
    localStorage.setItem('cart', JSON.stringify(cart));
    renderCart();
  }

  function renderCart() {
    const cart = JSON.parse(localStorage.getItem('cart')) || [];
    const list = document.getElementById('cart-list');
    const summary = document.getElementById('cart-summary');
    list.innerHTML = '';
    summary.innerHTML = '';

    if (cart.length === 0) {
      list.innerHTML = '<li>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤</li>';
      return;
    }

    let total = 0;
    cart.forEach((item, index) => {
      const li = document.createElement('li');
      const itemTotal = item.quantity * item.price;
      total += itemTotal;
      li.innerHTML = `
        <div class="cart-item">
          <div>
            <strong>${item.name}</strong><br/>
            ‡∏ø${item.price} x ${item.quantity} = ‡∏ø${itemTotal}
<div class="cart-controls">
  <button 
    onclick="updateQuantity(${index}, -1)" 
    style="width:4rem;height:4rem;font-size:16px;padding:2px 5px;border-radius:4px;border:1px solid #ccc;background:#f3f4f6;cursor:pointer;">
    ‚ûñ
  </button>

  <button 
    onclick="updateQuantity(${index}, 1)" 
    style="width:4rem;height:4rem;font-size:16px;padding:2px 5px;border-radius:4px;border:1px solid #ccc;background:#f3f4f6;cursor:pointer;">
    ‚ûï
  </button>

  <button 
    onclick="removeFromCart(${index})" 
    style="width:4rem;height:4rem;font-size:16px;padding:2px 5px;border-radius:4px;border:1px solid #ccc;background:#f3f4f6;color:#fff;cursor:pointer;">
    üóë
  </button>
</div>
      `;
      list.appendChild(li);
    });

    summary.innerHTML = `<p><strong>‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ‡∏ø${total}</strong></p>`;
  }

  function scrollToCart() {
    const cartSection = document.querySelector(".cart-section");
    if (cartSection) {
      cartSection.scrollIntoView({ behavior: "smooth" });
    }
  }



  window.addEventListener('DOMContentLoaded', renderCart);
</script>

<style>
.product-layout {
  display: flex;
  gap: 2rem;
  padding: 4rem 1rem;
}

.cart-section {
  width: 25%;
  background: #f3f4f6;
  padding: 1rem;
  border-radius: 12px;
  height: fit-content;
  max-height: 80vh;
  overflow-y: auto;
}

.cart-section.sticky {
  position: sticky;
  top: 15rem;
  align-self: flex-start;
}

.cart-section h2 {
  font-size: 1.25rem;
  margin-bottom: 1rem;
  color: #1f2937;
}

.cart-section ul {
  list-style: none;
  padding: 0;
  margin-bottom: 1rem;
}

.cart-section li {
  margin-bottom: 1rem;
  color: #374151;
  background: #fff;
  padding: 0.75rem;
  border-radius: 6px;
  box-shadow: 0 2px 6px rgba(0,0,0,0.05);
}

.cart-controls {
  display: flex;
  gap: 0.25rem;
}

.cart-controls button.small-button {
  all: unset; /* ‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å global */
  background: #e5e7eb;
  border: 1px solid #ccc;
  border-radius: 4px;
  padding: 0.25rem 0.4rem;
  font-size: 1rem;
  cursor: pointer;
  transition: background 0.2s;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  width: 30px;
  height: 30px;
  line-height: 1;
}
.cart-controls button.small-button:hover {
  background: #d1d5db;
}

.cart-controls button.small-button.danger {
  background: #ef4444;
  color: white;
  border: none;
}

.cart-controls button.small-button.danger:hover {
  background: #b91c1c;
}

.cart-controls button:hover {
  background: #d1d5db;
}

.cart-controls button:last-child {
  background: #ef4444;
  color: white;
  border: none;
}

.cart-controls button:last-child:hover {
  background: #b91c1c;
}


.clear-cart {
  background: #ef4444;
  color: white;
  border: none;
  padding: 0.1rem 1rem;
  width: 100%;
  border-radius: 6px;
  font-weight: bold;
  cursor: pointer;
}

.clear-cart:hover {
  background: #b91c1c;
}

.product-section {
  flex: 1;
}

.product-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
  gap: 2rem;
  margin-top: 2rem;
}

.product-card {
  background: #ffffff;
  border-radius: 12px;
  padding: 1.5rem;
  text-align: center;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
  transition: transform 0.2s ease;
}

.product-card:hover {
  transform: translateY(-4px);
}

.product-card img {
  max-width: 100%;
  height: 250px;
  object-fit: contain;
  margin-bottom: 1rem;
}

.product-card h3 {
  margin: 0.5rem 0;
  /* font-size: 1.25rem; */
  color: #111827;
}

.product-card p {
  font-size: 0.95rem;
  color: #4b5563;
  margin-bottom: 1rem;
  min-height: 60px;
}

.add-to-cart {
  background: #2563eb;
  color: white;
  border: none;
  border-radius: 6px;
  padding: 0.5rem 1rem;
  font-size: 1rem;
  cursor: pointer;
  transition: background 0.2s ease;
}

.add-to-cart:hover {
  background: #1e40af;
}

.floating-cart {
  display: none;
  position: fixed;
  bottom: 20px;
  right: 20px;
  background-color: #ffffff;
  border: none;
  border-radius: 50%;
  width: 64px;
  height: 64px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.6);
  z-index: 1000;
  cursor: pointer;
  transition: background 0.3s;
  align-items: center;
  justify-content: center;
}
.floating-cart:hover {
  background-color: #c2c3c9;
}
.cart-icon {
  font-size: 2rem;       /* ‚úÖ ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Ç‡∏ô‡∏≤‡∏î */
  color: #ffffff;        /* ‚úÖ ‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß */
  line-height: 1;
}

@media (max-width: 768px) {
  .product-layout {
    flex-direction: column;
  }

  .cart-section {
    width: 100%;
    order: 2;
  }

  .floating-cart {
    display: flex;
  }
}
  
</style>